{% block body %}
<?php

namespace Drupal\{{ entity.namespace }}\Form;

use Drupal\Core\Database\Connection;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\{{ entity.namespace }}\Controller\UtilityController;
use Drupal\{{ entity.namespace }}\{{ entity.singularName | title | replace({' ': ''}) }}Repository;
{% set file = 0 %}
{% for field in fields %}{% if (field.type == 9 and file == 0) %}use Drupal\file\Entity\File; {% set file = 1 %} {% endif %}{% endfor %}


class {{ entity.singularName | title | replace({' ': ''}) }}Form extends FormBase
{

    public $id;

    /**
     * The repository for our specialized queries.
     *
     * @var \Drupal\{{ entity.namespace }}\{{ entity.singularName | title | replace({' ': ''}) }}Repository
     */
    protected $repository;

    /**
     * The Database Connection.
     *
     * @var \Drupal\Core\Database\Connection
     */
    protected $database;

    /**
     * {@inheritdoc}
     */
    public static function create(ContainerInterface $container)
    {
        $controller = new static($container->get('{{ entity.singularName|replace({' ': '_'}) | lower }}.repository'), $container->get('database'));
        $controller->setStringTranslation($container->get('string_translation'));
        return $controller;
    }

    /**
     * Construct a new form.
     *
     * @param \Drupal\{{ entity.namespace }}\{{ entity.singularName | title | replace({' ': ''}) }}Repository $repository
     *   The repository service.
     * 
     * @param \Drupal\Core\Database\Connection $database
     *   The database connection.
     */
    public function __construct({{ entity.singularName | title | replace({' ': ''}) }}Repository $repository, Connection $database)
    {
        $this->repository = $repository;
        $this->database = $database;
    }

    /**
     * {@inheritdoc}
     */
    public function getFormId()
    {
        return '{{ entity.singularName|replace({' ': '_'}) |lower }}_form';
    }

    /**
     * {@inheritdoc}
     */
    public function buildForm(array $form, FormStateInterface $form_state, $id = NULL)
    {
        $con = $this->database;
        $data = array();
        $this->id = $id;

        if (isset($id)) {
            $query = $con->select('{{ entity.pluralName|replace({' ': '_'}) | lower }}', '{{ entity.pluralName|replace({' ': '_'}) | first | lower }}')
                ->condition('id', $id)
                ->fields('{{ entity.pluralName|replace({' ': '_'}) | first | lower }}');
            $data = $query->execute()->fetchAssoc();
        }

        $form['group1'] = [
            '#type'  => 'container',
            '#open'  => true,
            '#attributes' => ['class' => 'row'],
        ];

{% for field in fields %}
{% if field.type == 12 %}

        ${{ field.relationEntity.pluralName|replace({' ': '_'}) |lower}} = array();
        $find_{{ field.relationEntity.pluralName|replace({' ': '_'}) | lower }} = \Drupal::database()->select('{{ field.relationEntity.pluralName|replace({' ': '_'}) | lower }}', '{{ field.relationEntity.pluralName|replace({' ': '_'}) | first | lower }}')
            ->fields('{{ field.relationEntity.pluralName|replace({' ': '_'}) | first | lower }}', ['id', '{{ field.relationField.name |replace({' ': '_'}) |lower}}']);
        ${{ field.relationEntity.pluralName|replace({' ': '_'}) |lower}}_data = $find_{{ field.relationEntity.pluralName|replace({' ': '_'}) | lower }}->execute()->fetchAll();
        foreach(${{ field.relationEntity.pluralName|replace({' ': '_'}) |lower}}_data as $value){
            ${{ field.relationEntity.pluralName|replace({' ': '_'}) |lower}}[$value->id] = $value->{{ field.relationField.name |replace({' ': '_'}) |lower}};
        }

{% endif %}
        $form['group1']['{{ field.name|replace({' ': '_'}) | lower  }}'] = [
            '#title' => $this->t('{{ field.name | title  }}'),
            '#required' => {{ field.isNullable ? 'FALSE' : 'TRUE' }},
    {% if field.type == 1 and field.isOnForm == 1 %}
        '#type' => 'textfield',
            '#maxlength' => {{ field.length ? field.length : 255 }},
            '#default_value' => (isset($data['{{ field.name|replace({' ': '_'}) | lower  }}'])) ? $data['{{ field.name|replace({' ': '_'}) | lower  }}'] : '',
    {% elseif field.type == 2 and field.isOnForm == 1 %}
        '#type' => 'number',
            '#maxlength' => {{ field.length ? field.length : 255 }},
            '#default_value' => (isset($data['{{ field.name|replace({' ': '_'}) | lower  }}'])) ? $data['{{ field.name|replace({' ': '_'}) | lower  }}'] : '',
    {% elseif field.type == 3 and field.isOnForm == 1 %}
        '#type' => 'url',
            '#maxlength' => {{ field.length ? field.length : 255 }},
            '#default_value' => (isset($data['{{ field.name|replace({' ': '_'}) | lower  }}'])) ? $data['{{ field.name|replace({' ': '_'}) | lower  }}'] : '',
    {% elseif (field.type == 4 and field.isOnForm == 1 ) or (field.type == 5 and field.isOnForm == 1) %}
        '#type' => 'text_format',
            '#format' => 'basic_html',
            '#default_value' => (isset($data['{{ field.name|replace({' ': '_'}) | lower  }}'])) ? $data['{{ field.name|replace({' ': '_'}) | lower  }}'] : '',
    {% elseif field.type == 6 and field.isOnForm == 1 %}
        '#type' => 'tel',
            '#maxlength' => {{ field.length ? field.length : 15 }},
            '#default_value' => (isset($data['{{ field.name|replace({' ': '_'}) | lower  }}'])) ? $data['{{ field.name|replace({' ': '_'}) | lower  }}'] : '',
    {% elseif field.type == 7 and field.isOnForm == 1 %}
        '#type' => 'email',
            '#maxlength' => {{ field.length ? field.length : 45 }},
            '#default_value' => (isset($data['{{ field.name|replace({' ': '_'}) | lower  }}'])) ? $data['{{ field.name|replace({' ': '_'}) | lower  }}'] : '',
    {% elseif field.type == 8 and field.isOnForm == 1 %}
        '#type' => 'number',
            '#default_value' => (isset($data['{{ field.name|replace({' ': '_'}) | lower  }}'])) ? $data['{{ field.name|replace({' ': '_'}) | lower  }}'] : '',
    {% elseif field.type == 9 and field.isOnForm == 1 %}
        '#description' => $this->t(' Allowed file types: {{ field.validation }}'),
            '#type' => 'managed_file',
            '#default_value' => (isset($data['{{ field.name|replace({' ': '_'}) | lower  }}'])) ? $data['{{ field.name|replace({' ': '_'}) | lower  }}'] : [],
            '#upload_location' => 'public://{{entity.singularName|replace({' ': '_'}) |lower }}/',
            '#upload_validators' => array(
                'file_validate_extensions' => array('{{ field.validation }}')
            ),
    {% elseif field.type == 10 and field.isOnForm == 1 %}
        '#type' => 'date',
            '#default_value' => (isset($data['{{ field.name|replace({' ': '_'}) | lower  }}'])) ? $data['{{ field.name|replace({' ': '_'}) | lower  }}'] : '',
    {% elseif field.type == 11 and field.isOnForm == 1 %}
            '#type' => 'checkbox',
                '#default_value' => (isset($data['{{ field.name|replace({' ': '_'}) | lower  }}'])) ? $data['{{ field.name|replace({' ': '_'}) | lower  }}'] : '',
    {% elseif field.type == 12 and field.isOnForm == 1 %}
            '#type' => 'select',
            '#options' => ${{ field.relationEntity.pluralName|replace({' ': '_'}) |lower}},
            '#default_value' => (isset($data['{{ field.name|replace({' ': '_'}) | lower  }}'])) ? $data['{{ field.name|replace({' ': '_'}) | lower  }}'] : '',
    {% elseif field.type == 13 and field.isOnForm == 1 %}
        '#type' => 'datetime',
            '#default_value' => (isset($data['{{ field.name|replace({' ': '_'}) | lower  }}'])) ? $data['{{ field.name|replace({' ': '_'}) | lower  }}'] : '',
{% endif %}
        '#attributes' => array('class' => array('form-control')),
            '#prefix' => '<div class="form-group col-md-4">',
            '#suffix' => '</div>',
        ];

{% endfor %}

        $form['status'] = [
            '#type' => 'checkbox',
            '#title' => $this->t('Active'),
            '#default_value' => (isset($data['status'])) ? $data['status'] : '',
            '#attributes' => ['class' => ['mt-4 ']],
        ];

        $form['submit'] = [
            '#type' => 'submit',
            '#value' => $this->t('Save'),
            '#button_type' => 'primary'
        ];

        $form['#attached']['library'][] = '{{ entity.namespace}}/bootstrap';

        $form['#cache']['max-age'] = 0;

        return $form;
    }

    /**
     * @param array $form
     * @param FormStateInterface $form_state
     */
    public function validateForm(array &$form, FormStateInterface $form_state)
    {
{% for field in fields %}
{% if field.isNullable == 0 %}
        if (!$form_state->getValue('{{ field.name|replace({' ': '_'}) | lower  }}') || empty($form_state->getValue('{{ field.name|replace({' ': '_'}) | lower  }}'))) {
            $form_state->setErrorByName('{{ field.name|replace({' ': '_'}) | lower  }}', $this->t('{{field.name}} is required.'));
        }

{% endif %}
{% endfor %}
    }

    /**
     * {@inheritdoc}
     */
    public function submitForm(array &$form, FormStateInterface $form_state)
    {
{% for field in fields %}
{% if field.type == 9 %}
        $file = $form_state->getValue('{{ field.name|replace({' ': '_'}) | lower  }}');
{% endif %}
{% endfor %}
        $util = new UtilityController();
        $data = [
{% for field in fields %}
{% if field.type == 9 %}
            '{{ field.name|replace({' ': '_'}) | lower  }}' => $file[0],
{% elseif field.type == 4 or field.type == 5 %}
            '{{ field.name|replace({' ': '_'}) | lower  }}' => $form_state->getValue('{{ field.name|replace({' ': '_'}) | lower  }}')['value'],
{% else %}
            '{{ field.name|replace({' ': '_'}) | lower  }}' => $form_state->getValue('{{ field.name|replace({' ': '_'}) | lower  }}'),
{% endif %}
{% endfor %}
            'status' => $form_state->getValue('status'),
        ];
{% for field in fields %}
{% if field.type == 9 %}
        if ($file) {
            $file = File::load($file[0]);
            $file->setPermanent();
            $file->save();
        }
{% endif %}
{% endfor %}

        $id = $this->id;
        if (isset($id)) {
            $qry = $this->database->select('{{ entity.pluralName|replace({' ': '_'}) |lower }}', '{{ entity.pluralName|replace({' ': '_'}) | first | lower }}')
                ->condition('id', $id)
                ->fields('{{ entity.pluralName|replace({' ': '_'}) | first | lower }}');
            $original = $qry->execute()->fetchAssoc();
            $data['id'] = $id;
            $edit = $this->repository->update($data);
            if ($edit) {
                $util->setLog("EDIT", "{{ entity.singularName | capitalize}}", $id, $original, $data);
            }
        } else {
            $data['created_by'] = \Drupal::currentUser()->id();
            $data['created_at'] = date('Y-m-d H:i:s');
            $new = $this->repository->insert($data);
            if ($new) {
                $util->setLog("ADD", "{{ entity.singularName | capitalize}}", $new, $data);
            }
        }

        $url = new Url('{{ entity.namespace }}.{{ entity.singularName|replace({' ': '_'}) |lower }}.index');
        $response = new RedirectResponse($url->toString());
        $response->send();
    }
}
{% endblock %}