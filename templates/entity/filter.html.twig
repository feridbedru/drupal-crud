{% block body %}
<?php

namespace Drupal\{{ entity.namespace }}\FilterForm;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Database\Connection;
use Symfony\Component\DependencyInjection\ContainerInterface;


class {{ entity.singularName | title | replace({' ': ''}) }}SearchForm extends FormBase
{

    /**
     * The Database Connection.
     *
     * @var \Drupal\Core\Database\Connection
     */
    protected $database;

    public $header;

    /**
    * {@inheritdoc}
    */
    public function getFormId()
    {
        return '{{ entity.singularName|replace({' ': '_'}) |lower }}_search_form';
    }

    /**
     * {@inheritdoc}
     */
    public static function create(ContainerInterface $container)
    {
        $controller = new static($container->get('database'));
        $controller->setStringTranslation($container->get('string_translation'));
        return $controller;
    }

    /**
     * {{ entity.singularName | title | replace({' ': ''}) }}SearchForm constructor.
     *
     * @param \Drupal\Core\Database\Connection $database
     *   The database connection.
     */
    public function __construct(Connection $database)
    {
        $this->database = $database;
    }

    /**
    * {@inheritdoc}
    */
    public function buildForm(array $form, FormStateInterface $form_state)
    {
        {% set selector = entity.pluralName|replace({' ': '_'}) | first | lower %}
        $this->header = [
            ['data' => $this->t('#'), 'field' => '{{ selector }}.id'],
{% for field in fields %}
{% if field.isOnIndex == 1 %}
            ['data' => $this->t('{{ field.name | title  }}'), 'field' => '{{ selector }}.{{ field.name|replace({' ': '_'}) | lower  }}'],
{% endif %}{% endfor %}
            ['data' => $this->t('Operations'), 'colspan' => 2], 
        ];

        $form['filters'] = [
            '#type'  => 'details',
            '#title' => $this->t('Search and Filter'),
            '#tree' => TRUE,
            '#open'  => TRUE,
        ];

{% for field in fields %}
{% if field.isOnFilter == 1 and field.type != 12 %}
        $form['filters']['{{ field.name|replace({' ': '_'}) | lower  }}'] = [
            '#type' => '{% if field.type == 1 %}textfield{% elseif field.type == 2 %}number{% elseif field.type == 3 %}url{% elseif field.type == 6 %}tel{% elseif field.type == 7 %}email{% elseif field.type == 8 %}number{% elseif field.type == 10 %}date{% elseif field.type == 11 %}checkbox{% elseif field.type == 13 %}datetime{% else %}textfield{% endif %}',
            '#title' => $this->t('{{ field.name | title  }}'),
            '#default_value' => (isset($data['{{ field.name|replace({' ': '_'}) | lower  }}'])) ? $data['{{ field.name|replace({' ': '_'}) | lower  }}'] : '',
            '#attributes' => array('class' => array('form-control')),
            '#prefix' => '<div class="form-group col-md-2">',
            '#suffix' => '</div>',
        ];

{% elseif field.isOnFilter == 1 and field.type == 12  %}
        ${{ field.relationEntity.pluralName|replace({' ': '_'}) |lower}} = array();
        $find_{{ field.relationEntity.pluralName|replace({' ': '_'}) | lower }} = \Drupal::database()->select('{{ field.relationEntity.pluralName|replace({' ': '_'}) | lower }}', '{{ field.relationEntity.pluralName|replace({' ': '_'}) | first | lower }}')
            ->fields('{{ field.relationEntity.pluralName|replace({' ': '_'}) | first | lower }}', ['id', '{{ field.relationField.name |replace({' ': '_'}) |lower}}']);
        ${{ field.relationEntity.pluralName|replace({' ': '_'}) |lower}}_data = $find_{{ field.relationEntity.pluralName|replace({' ': '_'}) | lower }}->execute()->fetchAll();
        foreach(${{ field.relationEntity.pluralName|replace({' ': '_'}) |lower}}_data as $value){
            ${{ field.relationEntity.pluralName|replace({' ': '_'}) |lower}}[$value->id] = $value->{{ field.relationField.name |replace({' ': '_'}) |lower}};
        }
        $form['filters']['{{ field.name|replace({' ': '_'}) | lower  }}'] = [
            '#type' => 'select',
            '#title' => $this->t('{{ field.name | title  }}'),
            '#options' => ${{ field.relationEntity.pluralName|replace({' ': '_'}) |lower}},
            '#attributes' => array('class' => array('form-control')),
            '#default_value' => (isset($data['{{ field.name|replace({' ': '_'}) | lower  }}'])) ? $data['{{ field.name|replace({' ': '_'}) | lower  }}'] : '',
            '#prefix' => '<div class="form-group col-md-2">',
            '#suffix' => '</div>',
        ];

{% endif %}
{% endfor %}

        $form['filters']['actions'] = [
            '#type' => 'actions'
        ];

        $form['filters']['actions']['submit'] = [
            '#type' => 'submit',
            '#value' => t('Filter'),
            '#wrapper_attributes' => ['class' => 'mb-3'],
            '#ajax' => [
                'callback' => [$this, 'findRows'],
                'wrapper' => 'list-container',
            ],
        ];

{% for field in fields %}
{% if field.isOnFilter == 1 %}
        ${{ field.name|replace({' ': '_'}) | lower  }} = "";
{% endif %}
{% endfor %}
        $resources = $this->getDataRows({% for field in fields %}{% if field.isOnFilter == 1 %}${{ field.name|replace({' ': '_'}) | lower  }}, {% endif %}{% endfor %});

        // render table
        $form['tablesort_table'] = [
            '#theme' => 'table',
            '#header' => $this->header,
            '#rows' =>  $resources,
            '#empty' => $this->t('No records found'),
            '#sticky' => TRUE,
        ];

        $form['pager'] = [
            '#type' => 'pager',
        ];

        $form['#attached']['library'][] = '{{ entity.namespace }}/bootstrap';

        return $form;
    }

    /**
     * {@inheritdoc}
     */
    public function validateForm(array &$form, FormStateInterface $form_state)
    {
    }

    /**
     * {@inheritdoc}
     */
    public function submitForm(array &$form, FormStateInterface $form_state)
    {
    }

    private function getDataRows({% for field in fields %}{% if field.isOnFilter == 1 %}${{ field.name|replace({' ': '_'}) | lower  }}, {% endif %}{% endfor %})
    {
        $query = $this->database->select('{{ entity.pluralName|replace({' ': '_'}) | lower }}', '{{ entity.pluralName|replace({' ': '_'}) | first | lower }}')
            ->fields('{{ entity.pluralName|replace({' ': '_'}) | first | lower }}', ['id'{% for field in fields %}{% if field.isOnIndex == 1 or field.isOnFilter == 1 %}, '{{ field.name|replace({' ': '_'}) | lower }}'{% endif %}{% endfor %}])
            ->extend('Drupal\Core\Database\Query\TableSortExtender')
            ->extend('Drupal\Core\Database\Query\PagerSelectExtender')
            ->limit(10);

{% for field in fields %}
{% if field.isOnFilter == 1 %}
        if (${{ field.name|replace({' ': '_'}) | lower  }} != "") {
{% if field.type == 1 %}
            $query->condition('{{ entity.pluralName|replace({' ': '_'}) | first | lower }}.{{ field.name|replace({' ': '_'}) | lower  }}', '%' . ${{ field.name|replace({' ': '_'}) | lower  }} . '%', 'like');
{% else %}
            $query->condition('{{ entity.pluralName|replace({' ': '_'}) | first | lower }}.{{ field.name|replace({' ': '_'}) | lower  }}',  ${{ field.name|replace({' ': '_'}) | lower  }},  '=');
{% endif %}
        }
{% endif %}
{% endfor %}

        $results = $query
            ->orderByHeader($this->header)
            ->execute();

        $rows = [];
        $count = 0;

        foreach ($results as $data) {
            if ($data->id != 0) {

                $count++;
                $linkDelete = '';
                $linkEdit = '';

                $url_view = Url::fromRoute('{{ entity.namespace }}.{{ entity.singularName|replace({' ': '_'}) |lower }}.show', ['id' => $data->id], []);
                if (\Drupal::currentUser()->hasPermission('{{ entity.singularName|replace({' ': '_'}) |lower }} delete')) {
                    $delete_options = array(
                        'attributes' => array(
                            'class' => array(
                                'button button--danger button--small',
                            ),
                        ),
                    );
                    $url_delete = Url::fromRoute('{{ entity.namespace }}.{{ entity.singularName|replace({' ': '_'}) |lower }}.delete', ['id' => $data->id], []);
                    $url_delete->setOptions($delete_options);
                    $linkDelete = Link::fromTextAndUrl('Delete', $url_delete);
                }

                if (\Drupal::currentUser()->hasPermission('{{ entity.singularName|replace({' ': '_'}) |lower }} edit')) {
                    $edit_options = array(
                        'attributes' => array(
                            'class' => array(
                                'button button--secondary button--small',
                            ),
                        ),
                    );
                    $url_edit = Url::fromRoute('{{ entity.namespace }}.{{ entity.singularName|replace({' ': '_'}) |lower }}.edit', ['id' => $data->id], []);
                    $linkEdit = Link::fromTextAndUrl('Edit', $url_edit);
                    $url_edit->setOptions($edit_options);
                }
            
                $con = Database::getConnection();

                $linkView = Link::fromTextAndUrl('View', $url_view);
{% for field in fields %}
{% if field.type == 12 %}
                ${{ field.relationEntity.singularName|replace({' ': '_'}) |lower}} = '';
                ${{ field.relationEntity.singularName|replace({' ': '_'}) |lower}}_id = $data->{{ field.name|replace({' ': '_'}) |lower}};
                if (${{ field.relationEntity.singularName|replace({' ': '_'}) |lower}}_id) {
                    $find_{{ field.relationEntity.singularName|replace({' ': '_'}) | lower }} = \Drupal::database()->select('{{ field.relationEntity.pluralName|replace({' ': '_'}) | lower }}', '{{ field.relationEntity.pluralName|replace({' ': '_'}) | first | lower }}')
                        ->condition('id', ${{ field.relationEntity.singularName|replace({' ': '_'}) |lower}}_id)
                        ->fields('{{ field.relationEntity.pluralName|replace({' ': '_'}) | first | lower }}');
                    ${{ field.relationEntity.singularName|replace({' ': '_'}) |lower}}_data = $find_{{ field.relationEntity.singularName|replace({' ': '_'}) | lower }}->execute()->fetchAll();
                    ${{ field.relationEntity.singularName|replace({' ': '_'}) |lower}} =  ${{ field.relationEntity.singularName|replace({' ': '_'}) |lower}}_data[0]->{{ field.relationField.name |replace({' ': '_'}) |lower}};
                }
{% endif %}
{% endfor %}
                $rows[$data->id] = array(
                    'id' => $count,
{% for field in fields %}{% if field.isOnIndex == 1 %}
                    '{{ field.name|replace({' ': '_'}) | lower  }}' => {% if field.type == 12 %}${{ field.relationEntity.singularName|replace({' ': '_'}) |lower}}{% else %}$data->{{ field.name|replace({' ': '_'}) | lower  }}{% endif %},
{% endif %}{% endfor %}
                    'edit' =>  $linkEdit,
                    'delete' => $linkDelete,
                );
            }
        }
        return $rows;
    }

    function findRows(array &$form, FormStateInterface $form_state)
    {
        $field = $form_state->getValues();
        $rows = [];
        $rows = $this->getDataRows({% for field in fields %}{% if field.isOnFilter == 1 %}$field["{{ field.name|replace({' ': '_'}) | lower  }}"], {% endif %}{% endfor %});
        $form['table']['#rows'] = $rows;

        return $form['table'];
    }
}
{% endblock %}