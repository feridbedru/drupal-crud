{% block body %}
<?php

namespace Drupal\{{ entity.namespace }}\Controller;

use Drupal\Core\Controller\ControllerBase;
use Drupal\{{ entity.namespace }}\{{ entity.singularName | title | replace({' ': ''}) }}Repository;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\Core\Url;
use Drupal\{{ entity.namespace }}\Controller\UtilityController;
{% set file = 0 %}
{% for field in fields %}{% if (field.type == 9 and file == 0) %}use Drupal\file\Entity\File; {% set file = 1 %} {% endif %}{% endfor %}


/**
 * Class {{ entity.singularName | title | replace({' ': ''}) }}Controller
 * @package Drupal\{{ entity.namespace }}\Controller
 */
class {{ entity.singularName | title | replace({' ': ''}) }}Controller extends ControllerBase
{
    /**
     * The repository for our specialized queries.
     *
     * @var \Drupal\{{ entity.namespace }}\{{ entity.singularName | title | replace({' ': ''}) }}Repository
     */
    protected $repository;

    /**
     * {@inheritdoc}
     */
    public static function create(ContainerInterface $container)
    {
        $controller = new static($container->get('{{ entity.singularName|replace({' ': '_'}) | lower }}.repository'));
        $controller->setStringTranslation($container->get('string_translation'));
        return $controller;
    }

    /**
     * Construct a new controller.
     *
     * @param \Drupal\{{ entity.namespace }}\{{ entity.singularName | title | replace({' ': ''}) }}Repository $repository
     *   The repository service.
     */
    public function __construct({{ entity.singularName | title | replace({' ': ''}) }}Repository $repository)
    {
        $this->repository = $repository;
    }

    /**
     * @return array
     */
    public function getTitle($id)
    {
        return UtilityController::generateTitle($id, '{{ entity.pluralName|replace({' ': '_'}) | lower }}', '{% for field in fields %}{% if field.isSluggable == 1 %}{{ field.name |replace({' ': '_'}) | lower }}{% endif %}{% endfor %}');
    }

    /**
     * @return array
     */
    public function show($id)
    {
        $build['collection'] = array(
            '#theme' => '{{ entity.singularName|replace({' ': '_'}) | lower }}_list',
            '#attached' => ['library' => ['{{ entity.namespace }}/list']],
            '#items' => (array)$this->repository->load($id),
            '#backurl' => Url::fromRoute('{{ entity.namespace }}.{{ entity.singularName|replace({' ': '_'}) | lower }}.index', [])->toString()
        );

        return $build;
    }

{% if entity.hasPublicPage == 1 %}
    /**
    * @return array
    */
    public function list()
    {
        return [
        '#type' => 'inline_template',
        '#template' => " "
        ];
    }

    /**
     * @return array
     */
    public function view($slug)
    {
        $con = Database::getConnection();
        $query = $con->select('{{ entity.pluralName|replace({' ': '_'}) | lower }}', '{{ entity.pluralName|replace({' ': '_'}) | first | lower }}')
            ->condition('slug', $slug)
            ->fields('{{ entity.pluralName|replace({' ': '_'}) | first | lower }}');
        $data = $query->execute()->fetchAssoc();
{% for field in fields %}
{% if field.type == 9 %}
        ${{ field.name|replace({' ': '_'}) | lower  }} = '';
        $file = File::load($data['{{ field.name|replace({' ': '_'}) | lower  }}']);
        if ($file)
            ${{ field.name|replace({' ': '_'}) | lower  }} = $file->createFileUrl();
{% elseif field.type == 12 %}
        ${{ field.relationEntity.singularName|replace({' ': '_'}) |lower}} = '';
        ${{ field.relationEntity.singularName|replace({' ': '_'}) |lower}}_id = $data['{{ field.name|replace({' ': '_'}) |lower}}'];
        if (${{ field.relationEntity.singularName|replace({' ': '_'}) |lower}}_id) {
            $find_{{ field.relationEntity.singularName|replace({' ': '_'}) | lower }} = \Drupal::database()->select('{{ field.relationEntity.pluralName|replace({' ': '_'}) | lower }}', '{{ field.relationEntity.pluralName|replace({' ': '_'}) | first | lower }}')
                ->condition('id', ${{ field.relationEntity.singularName|replace({' ': '_'}) |lower}}_id)
                ->fields('{{ field.relationEntity.pluralName|replace({' ': '_'}) | first | lower }}');
            ${{ field.relationEntity.singularName|replace({' ': '_'}) |lower}}_data = $find_{{ field.relationEntity.singularName|replace({' ': '_'}) | lower }}->execute()->fetchAll();
            ${{ field.relationEntity.singularName|replace({' ': '_'}) |lower}} =  ${{ field.relationEntity.singularName|replace({' ': '_'}) |lower}}_data[0]->{{ field.relationField.name |replace({' ': '_'}) |lower}};
        }
{% elseif field.type == 11 %}
        ${{ field.name|replace({' ': '_'}) | lower  }} = $data['{{ field.name|replace({' ': '_'}) | lower  }}'] ? "Yes" : "No" ;
{% endif %}
{% endfor %}
        $html = '
{% for field in fields %}
{% if field.type == 11 %}
        <p><b>' . t('{{ field.name | title}}') . ': </b> ' . ${{ field.name|replace({' ': '_'}) | lower  }} . '</p>
{% elseif field.type == 12 %}
        <p><b>' . t('{{ field.name | title}}') . ': </b> ' . ${{ field.relationEntity.singularName|replace({' ': '_'}) |lower}} . '</p>
{% elseif field.type == 9 %}
        <p><b>' . t('{{ field.name | title}}') . ': </b> ' . ${{ field.name|replace({' ': '_'}) | lower  }} . '</p>
{% else %}
        <p><b>' . t('{{ field.name | title}}') . ': </b> ' . $data['{{ field.name|replace({' ': '_'}) | lower  }}'] . '</p>
{% endif %}
{% endfor %}
        <p><b>' . t('Active') . ': </b> ' . $data['active'] ? "Yes" : "No" . '</p>';

        return [
            '#type' => 'inline_template',
            '#template' => $html
        ];
    }
{% endif %}
}
{% endblock %}